{"version":3,"sources":["audio-clips/jaw-harp-1.wav","audio-clips/jaw-harp-2.wav","audio-clips/jaw-harp-3.wav","audio-clips/jaw-harp-4.wav","audio-clips/jaw-harp-5.wav","audio-clips/jaw-harp-6.wav","audio-clips/jaw-harp-7.wav","audio-clips/jaw-harp-8.wav","audio-clips/jaw-harp-9.wav","DrumPad.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DrumPad","handleOnClick","props","clickHandler","drumKey","className","id","this","onClick","src","drumAudio","type","React","Component","keys","clips","require","keyCodeValues","81","87","69","65","83","68","90","88","67","displays","Q","W","E","A","S","D","Z","X","C","App","handleKeyDown","event","hasOwnProperty","keyCode","playAudio","audio","document","getElementById","currentTime","paused","ended","readyState","cloneNode","play","setState","display","state","rows","k","i","cells","j","push","addEventListener","removeEventListener","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sMAAAA,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,kHCmB5BC,G,kNAfbC,cAAgB,WACd,EAAKC,MAAMC,aAAa,EAAKD,MAAME,U,uDAInC,OAAQ,yBAAKC,UAAU,mBACrB,4BAAQC,GAAE,iBAAYC,KAAKL,MAAME,SAAWI,QAASD,KAAKN,cACvDI,UAAU,wCACVE,KAAKL,MAAME,QACZ,2BAAOE,GAAIC,KAAKL,MAAME,QAASC,UAAU,OAAOI,IAAKF,KAAKL,MAAMQ,UAAWC,KAAK,oB,GAXlEC,IAAMC,YCEtBC,EAAO,CACX,CACE,IAAK,IAAK,KAEZ,CACE,IAAK,IAAK,KAEZ,CACE,IAAK,IAAK,MAIRC,EAAQ,CACZC,EAAQ,IACRA,EAAQ,IACRA,EAAQ,IACRA,EAAQ,IACRA,EAAQ,IACRA,EAAQ,IACRA,EAAQ,IACRA,EAAQ,IACRA,EAAQ,KAGJC,EAAgB,CACpBC,GAAI,IACJC,GAAI,IACJC,GAAI,IACJC,GAAI,IACJC,GAAI,IACJC,GAAI,IACJC,GAAI,IACJC,GAAI,IACJC,GAAI,KAGAC,EAAW,CACfC,EAAG,aACHC,EAAG,aACHC,EAAG,aACHC,EAAG,aACHC,EAAG,aACHC,EAAG,aACHC,EAAG,aACHC,EAAG,aACHC,EAAG,cA+DUC,E,kDA3Db,WAAYnC,GAAQ,IAAD,8BACjB,cAAMA,IAMRoC,cAAgB,SAACC,GACXtB,EAAcuB,eAAeD,EAAME,UACrC,EAAKC,UAAUzB,EAAcsB,EAAME,WATpB,EAanBC,UAAY,SAACpC,GACX,IAAMqC,EAAQC,SAASC,eAAevC,GAClCqC,EAAMG,YAAc,IAAMH,EAAMI,SAAWJ,EAAMK,OAASL,EAAMM,WAAa,EAC/EN,EAAMO,WAAU,GAAMC,OAEtBR,EAAMQ,OAER,EAAKC,SAAS,CAACC,QAAS1B,EAASrB,MAlBjC,EAAKgD,MAAQ,CACXD,QAAS,iBAHM,E,qDA0BjB,IAFA,IAAME,EAAO,GACTC,EAAI,EACCC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAE1B,IADA,IAAMC,EAAQ,GACLC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAME,KAAK,kBAAC,EAAD,CAASxD,QAASU,EAAK2C,GAAGE,GAAIjD,UAAWK,EAAMyC,GAAIrD,aAAcI,KAAKmC,aACjFc,IAEFD,EAAKK,KAAK,yBAAKvD,UAAU,OACtBqD,IAIL,OAAQ,yBAAKrD,UAAU,iEAErB,yBAAKA,UAAU,OACb,yBAAKC,GAAG,eAAeD,UAAU,oBAC/B,yBAAKA,UAAU,YACb,yBAAKC,GAAG,UAAUD,UAAU,mCAAmCE,KAAK+C,MAAMD,UAE3EE,O,0CAOPX,SAASiB,iBAAiB,UAAWtD,KAAK+B,iB,6CAI1CM,SAASkB,oBAAoB,UAAWvD,KAAK+B,mB,GAxD/B1B,IAAMC,WCxCJkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1B,SAASC,eAAe,SDwHpB,kBAAmB0B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.71b14ab1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/jaw-harp-1.6cab182a.wav\";","module.exports = __webpack_public_path__ + \"static/media/jaw-harp-2.f860e73f.wav\";","module.exports = __webpack_public_path__ + \"static/media/jaw-harp-3.a4de4166.wav\";","module.exports = __webpack_public_path__ + \"static/media/jaw-harp-4.82ab9227.wav\";","module.exports = __webpack_public_path__ + \"static/media/jaw-harp-5.ed5eab3a.wav\";","module.exports = __webpack_public_path__ + \"static/media/jaw-harp-6.21017986.wav\";","module.exports = __webpack_public_path__ + \"static/media/jaw-harp-7.10337bec.wav\";","module.exports = __webpack_public_path__ + \"static/media/jaw-harp-8.85e30d3e.wav\";","module.exports = __webpack_public_path__ + \"static/media/jaw-harp-9.773e124b.wav\";","import React from 'react';\n\nclass DrumPad extends React.Component {\n\n  handleOnClick = () => {\n    this.props.clickHandler(this.props.drumKey);\n  }\n\n  render() {\n    return (<div className=\"col-md-4 p-md-3\">\n      <button id={`jawHarp${this.props.drumKey}`} onClick={this.handleOnClick}\n         className=\"drum-pad btn btn-default w-100 h-100\">\n        {this.props.drumKey}\n        <audio id={this.props.drumKey} className=\"clip\" src={this.props.drumAudio} type=\"audio/wav\"/>\n      </button>\n    </div>);\n  }\n}\n\nexport default DrumPad;\n","import React from 'react';\nimport './App.css';\nimport DrumPad from './DrumPad.js';\n\nconst keys = [\n  [\n    'Q', 'W', 'E'\n  ],\n  [\n    'A', 'S', 'D'\n  ],\n  [\n    'Z', 'X', 'C'\n  ]\n];\n\nconst clips = [\n  require('./audio-clips/jaw-harp-1.wav'),\n  require('./audio-clips/jaw-harp-2.wav'),\n  require('./audio-clips/jaw-harp-3.wav'),\n  require('./audio-clips/jaw-harp-4.wav'),\n  require('./audio-clips/jaw-harp-5.wav'),\n  require('./audio-clips/jaw-harp-6.wav'),\n  require('./audio-clips/jaw-harp-7.wav'),\n  require('./audio-clips/jaw-harp-8.wav'),\n  require('./audio-clips/jaw-harp-9.wav')\n];\n\nconst keyCodeValues = {\n  81: 'Q',\n  87: 'W',\n  69: 'E',\n  65: 'A',\n  83: 'S',\n  68: 'D',\n  90: 'Z',\n  88: 'X',\n  67: 'C'\n}\n\nconst displays = {\n  Q: \"Jaw Harp 1\",\n  W: \"Jaw Harp 2\",\n  E: \"Jaw Harp 3\",\n  A: \"Jaw Harp 4\",\n  S: \"Jaw Harp 5\",\n  D: \"Jaw Harp 6\",\n  Z: \"Jaw Harp 7\",\n  X: \"Jaw Harp 8\",\n  C: \"Jaw Harp 9\"\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: 'Play Jaw Harp'\n    };\n  }\n\n  handleKeyDown = (event) => {\n    if (keyCodeValues.hasOwnProperty(event.keyCode)) {\n      this.playAudio(keyCodeValues[event.keyCode]);\n    }\n  }\n\n  playAudio = (id) => {\n    const audio = document.getElementById(id);\n    if (audio.currentTime > 0 && !audio.paused && !audio.ended && audio.readyState > 2) {\n      audio.cloneNode(true).play();\n    } else {\n      audio.play();\n    }\n    this.setState({display: displays[id]});\n  }\n\n  render() {\n    const rows = [];\n    var k = 0;\n    for (let i = 0; i < 3; i++) {\n      const cells = [];\n      for (let j = 0; j < 3; j++) {\n        cells.push(<DrumPad drumKey={keys[i][j]} drumAudio={clips[k]} clickHandler={this.playAudio}/>);\n        k++;\n      }\n      rows.push(<div className=\"row\">\n        {cells}\n      </div>);\n    }\n\n    return (<div className=\"App container-fluid d-flex flex-column\n     justify-content-center\">\n      <div className=\"row\">\n        <div id=\"drum-machine\" className=\"col-md-4 mx-auto\">\n          <div className=\"row py-3\">\n            <div id=\"display\" className=\"col-sm-6 text-center m-auto p-1\">{this.state.display}</div>\n          </div>\n          {rows}\n        </div>\n      </div>\n    </div>);\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}